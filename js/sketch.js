// Generated by CoffeeScript 2.4.1
var Button, Chessboard, Expanded, Explanation, Header, Items, MODE, Snapshots, chessboard, circle, current, draw, expanded, explanation, hiliteItem, hiliteOption, items, keyPressed, mouseMoved, mousePressed, objHeader, objItems, objSnapshots, options, preload, range, setup, snapshots,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

options = null;

items = null;

snapshots = null;

current = 0;

hiliteOption = '';

hiliteItem = '';

chessboard = null;

objSnapshots = null;

explanation = null;

objHeader = null;

objItems = null;

expanded = null;

MODE = 0; // 0=compact 1=expanded

range = null;

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

Button = class Button {
  constructor(prompt, x1, y1, click) {
    this.prompt = prompt;
    this.x = x1;
    this.y = y1;
    this.click = click;
    this.w = 75;
    this.h = 30;
  }

  draw() {
    rectMode(CENTER);
    fill('white');
    rect(this.x, this.y, this.w, this.h);
    rectMode(CORNER);
    fill('black');
    textAlign(CENTER, CENTER);
    return text(this.prompt, this.x, this.y);
  }

  inside() {
    return (this.x - this.w / 2 < mouseX && mouseX < this.x + this.w / 2) && (this.y - this.h / 2 < mouseY && mouseY < this.y + this.h / 2);
  }

};

Chessboard = class Chessboard {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
    this.R = 50;
  }

  count(i, j) { // calculates list counts for findBestColumn
    var a, b, entries, item1, item2, option, options1, options2;
    j = 7 - j;
    option = 'abcdefgh'[i] + '12345678'[j];
    item1 = 'C' + 'ABCDEFGH'[i];
    item2 = 'R' + '12345678'[j];
    entries = snapshots[current].entries;
    if (entries[item1] && entries[item2]) {
      options1 = entries[item1].split(' ');
      options2 = entries[item2].split(' ');
      a = indexOf.call(options1, option) >= 0 ? options1.length : 0;
      b = indexOf.call(options2, option) >= 0 ? options2.length : 0;
      if (a === 0 || b === 0) {
        return '';
      }
      return min(a, b);
    } else {
      return '';
    }
  }

  draw() {
    var c, choices, i, index, j, k, l, len, len1, len2, len3, m, n, ref, ref1, ref2;
    textSize(20);
    ref = range(8);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(8);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        fill((i + j) % 2 === 0 ? '#ccc' : 'black');
        rect(this.x + this.R * i, this.y + this.R * j, this.R, this.R);
        fill('yellow');
        text(this.count(i, j), this.x + this.R * (i + 0.5), this.y + this.R * (j + 0.5));
      }
    }
    fill('black');
    ref2 = range(8);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      text(8 - i, this.x - this.R * 0.2, this.y + this.R * (i + 0.5));
      text('abcdefgh'[i], this.x + this.R * (i + 0.5), this.y + 8.3 * this.R);
    }
    fill('green');
    textSize(24);
    choices = snapshots[current].choices;
    for (index = n = 0, len3 = choices.length; n < len3; index = ++n) {
      c = choices[index];
      if (c === '') {
        continue;
      }
      i = 0.5 + 'abcdefgh'.indexOf(c[0]);
      j = 8 - 0.5 - '12345678'.indexOf(c[1]);
      stroke('black');
      fill(index === choices.length - 1 ? 'yellow' : 'green');
      circle(this.x + this.R * i, this.y + this.R * j, 0.4 * this.R);
      noStroke();
      fill(index === choices.length - 1 ? 'green' : 'yellow');
      text(c, this.x + this.R * i, this.y + this.R * j);
    }
    return this.hiliteItem();
  }

  drawLine(i1, j1, i2, j2) {
    return line(this.x + this.R * (i1 + 0.5), this.y + this.R * (j1 + 0.5), this.x + this.R * (i2 + 0.5), this.y + this.R * (j2 + 0.5));
  }

  hiliteItem() {
    var i, item, itemType, j;
    item = hiliteItem;
    if (item === '') {
      return;
    }
    itemType = item[0];
    stroke(255, 255, 0, 128);
    strokeWeight(25);
    if (indexOf.call("CR", itemType) >= 0) {
      i = 'ABCDEFGH'.indexOf(item[1]);
      j = '12345678'.indexOf(item[1]);
      if (itemType === 'C') {
        this.drawLine(i, 0, i, 7);
      }
      if (itemType === 'R') {
        this.drawLine(0, 7 - j, 7, 7 - j);
      }
    }
    if (indexOf.call("AB", itemType) >= 0) {
      i = 'ABCDEFGHIJKLMNO'.indexOf(item[1]);
      if (itemType === 'A') {
        if (i < 7) {
          this.drawLine(0, 7 - i, i, 7);
        } else {
          this.drawLine(i - 7, 0, 7, 14 - i);
        }
      }
      if (itemType === 'B') {
        if (i < 7) {
          this.drawLine(7, 7 - i, 7 - i, 7);
        } else {
          this.drawLine(0, 14 - i, 14 - i, 0);
        }
      }
    }
    noStroke();
    return strokeWeight(1);
  }

  mouseMoved() {
    var i, j, k, len, ref, results;
    if ((this.x < mouseX && mouseX < this.x + this.R * 8) && (this.y < mouseY && mouseY < this.y + this.R * 8)) {
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(8);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            j = ref1[l];
            if ((this.y + this.R * (7 - j) < mouseY && mouseY < this.y + this.R * (7 - j + 1))) {
              if ((this.x + this.R * i < mouseX && mouseX < this.x + this.R * (i + 1))) {
                results1.push(hiliteOption = 'abcdefgh'[i] + '12345678'[j]);
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  }

};

Expanded = class Expanded {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

  drawExpanded(entries) {
    var i, item, j, k, len, option, results, x, y;
    textSize(16);
    textAlign(CENTER, CENTER);
    results = [];
    for (i = k = 0, len = items.length; k < len; i = ++k) {
      item = items[i];
      x = 25 + 25 * i;
      if (entries[item]) {
        results.push((function() {
          var l, len1, ref, results1;
          ref = entries[item].split(' ');
          results1 = [];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            option = ref[l];
            j = options.indexOf(option);
            y = this.y + 16 * j;
            stroke(128 + 64);
            line(x, y - 8, x, y + 8);
            line(x - 10, y, x + 8, y);
            noStroke();
            fill(hiliteOption === option ? 'white' : 'black');
            results1.push(text(option, x, y + 2));
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  drawLinks(entries) {
    var i, item, itemKeys, k, key, l, len, len1, option, optionKeys, results, x, y;
    fill('black');
    textSize(12);
    itemKeys = _.keys(entries);
    optionKeys = _.flatten((function() {
      var k, len, ref, results;
      ref = (function() {
        var results1;
        results1 = [];
        for (key in entries) {
          item = entries[key];
          results1.push(item.split(' '));
        }
        return results1;
      })();
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        option = ref[k];
        results.push(option);
      }
      return results;
    })());
    stroke('black');
    for (i = k = 0, len = options.length; k < len; i = ++k) {
      key = options[i];
      if (indexOf.call(optionKeys, key) >= 0) {
        y = this.y + 16 * i;
        line(25, y, width - 200, y);
      }
    }
    results = [];
    for (i = l = 0, len1 = items.length; l < len1; i = ++l) {
      key = items[i];
      if (indexOf.call(itemKeys, key) >= 0) {
        x = 25 * (i + 1);
        results.push(line(x, this.y, x, this.y + 63 * 16));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var snapshot;
    snapshot = snapshots[current];
    this.drawLinks(snapshot.entries);
    return this.drawExpanded(snapshot.entries);
  }

};

Explanation = class Explanation {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
    this.explanations = [];
    this.explanations.push('There are 16 primary items, 8 columns and 8 rows\n\nThe matrix is actually 64 options by 46 items\nIt is shown compressed here\nClick View to toggle View Mode\n\nItem CA is chosen\nOption a1 is first\n\nClick Next to see option a1 selected');
    this.explanations.push('Yellow texts are mouse aware\n\nItems CA, R1, AA and BH are hidden\nItem CB is chosen\nOption b3 is selected');
    this.explanations.push('Items CB, R3, AD and BI are hidden\nShortest item is CC\nOption c5 is selected\nWhen c5 later is backtracked, in snapshot 6,\n  it will be replaced with the other options in the item CC. (c6, c7 and c8)\n');
    this.explanations.push("Items CC, R5, AG and BJ are hidden\n\nThe 'best item' is considered to be an item that minimizes the number of remaining choices.\nIf there are several candidates, we choose the leftmost\n\nShortest item is CF\nOption f4 is selected");
    this.explanations.push('Items CF, R4, AI and BF are hidden\nShortest item is CH\nOption h7 is selected');
    this.explanations.push('Items CH, R7, AN and BG are hidden\nR6 is missing => h7 must backtrack\nf4 also backtracks as CF has no options left');
    this.explanations.push('Items CF, CH, R4, R5, R7, AE, AG, AI, AJ, AM, AN, BB, BD, BF, BG and BJ are unhidden\nc5 is backtracked and replaced by c6\nd2 is selected');
    this.explanations.push('Items CD and R2 are hidden\ne7 is selected');
    this.explanations.push('Items CE and R7 are hidden\nR8 is empty => e7 is backtracked');
    this.explanations.push("d2 is backtracked and replaced by d8");
    this.explanations.push("The JSON data structure is available in the browser using Ctrl+Shift+I");
    this.explanations.push("Ordering the entries starting with the center of the chessboard,\nmakes it possible to find the solution in eight snapshots instead of 64");
    this.explanations.push("Skipping the four corners can be done by deleting items AA, AO, BA and BO");
    this.explanations.push("Selecting the first available item instead of the shortest,\nincreases the number of snapshots from 64 to 114");
    this.explanations.push("It is just a coincidence that the number of snapshots\nand the number of options both have the value 64");
    this.explanations.push("Space, Up Arrow and Down Arrow also works");
  }

  draw() {
    textAlign(LEFT, TOP);
    textSize(14);
    fill('black');
    return text(this.explanations[current], this.x, this.y);
  }

};

Header = class Header {
  constructor(xp, yp) {
    this.xp = xp;
    this.yp = yp;
    this.buttons = [];
    this.buttons.push(new Button("View", this.xp + 1134, this.yp - 2, function() {
      return MODE = 1 - MODE;
    }));
    this.buttons.push(new Button("Prev", this.xp + 1218, this.yp - 2, function() {
      return current = modulo(current - 1, snapshots.length);
    }));
    this.buttons.push(new Button("Next", this.xp + 1302, this.yp - 2, function() {
      return current = modulo(current + 1, snapshots.length);
    }));
  }

  draw() {
    var button, entries, entry, i, item, k, key, l, len, len1, optionCount, ref, results, snapshot;
    textAlign(LEFT, CENTER);
    textSize(32);
    fill('black');
    noStroke();
    text('Dancing Links solving Eight Queens', this.xp + 15, this.yp);
    textAlign(RIGHT, CENTER);
    textSize(16);
    snapshot = snapshots[current];
    entries = _.flatten((function() {
      var ref, results;
      ref = snapshot.entries;
      results = [];
      for (key in ref) {
        entry = ref[key];
        results.push(entry.split(' '));
      }
      return results;
    })());
    optionCount = _.unique(entries).length;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    text(`${_.size(snapshot.entries)} items, ${entries.length} entries, ${optionCount} options`, 1150 - 200, this.yp);
    textAlign(CENTER, CENTER);
    textSize(14);
    fill('yellow');
    results = [];
    for (i = l = 0, len1 = items.length; l < len1; i = ++l) {
      item = items[i];
      results.push(text(item, this.xp + 25 + 25 * i, this.yp + 25));
    }
    return results;
  }

  mousePressed() {
    var button, k, len, ref, results;
    console.log(this.prompt);
    ref = this.buttons;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      if (button.inside()) {
        results.push(button.click());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseMoved() {
    var index, item, k, len, results, snapshot;
    if ((this.yp < mouseY && mouseY < this.yp + 250)) {
      snapshot = snapshots[current];
      results = [];
      for (index = k = 0, len = items.length; k < len; index = ++k) {
        item = items[index];
        if ((this.xp + 25 * (index + 0.5) < mouseX && mouseX < this.xp + 25 * (index + 1.5))) {
          results.push(hiliteItem = item);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

};

Items = class Items {
  constructor(xp, yp) {
    this.xp = xp;
    this.yp = yp;
  }

  draw() {
    return this.drawOptions(snapshots[current].entries);
  }

  drawOptions(entries) {
    var i, j, key, option, results, row;
    stroke('yellow');
    strokeWeight(1);
    //line offset+25*0.7,60,offset+w+10,60
    //line offset+25*0.7,60,offset+w+10,60
    noStroke();
// "CA"
    results = [];
    for (key in entries) {
      row = entries[key];
      if (MODE === 0) {
        i = items.indexOf(key);
        results.push((function() {
          var k, len, ref, results1;
          ref = row.split(' ');
          results1 = [];
          for (j = k = 0, len = ref.length; k < len; j = ++k) {
            option = ref[j];
            fill(option === hiliteOption ? 'white' : 'black');
            results1.push(text(option, this.xp + 25 + 25 * i, this.yp + 50 + 25 * j));
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Snapshots = class Snapshots {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

  draw() {
    var choice, i, j, k, len, results, snapshot;
    stroke('black');
    textSize(14);
    results = [];
    for (j = k = 0, len = snapshots.length; k < len; j = ++k) {
      snapshot = snapshots[j];
      textAlign(RIGHT, TOP);
      noStroke();
      fill('black');
      text(j, this.x - 2, 2 + this.y + 16 * j);
      fill(current === j ? 'yellow' : 'black');
      rect(this.x, this.y + 16 * j, 20 * 8, 16);
      textAlign(CENTER, TOP);
      fill('yellow');
      results.push((function() {
        var l, len1, ref, results1;
        ref = snapshot.choices;
        results1 = [];
        for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
          choice = ref[i];
          fill(current !== j ? 'yellow' : 'green');
          results1.push(text(choice, 10 + this.x + 20 * i, 2 + this.y + 16 * j));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  mousePressed() {
    var index;
    if (mouseX < width - 200 + 30) {
      return;
    }
    index = Math.floor((mouseY - this.y) / 16);
    if ((0 <= index && index < 65)) {
      return current = index;
    }
  }

};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    var k, len, snapshot;
    console.log(json);
    ({options, items, snapshots} = json);
    options = options.split(' ');
    items = items.split(' ');
    for (k = 0, len = snapshots.length; k < len; k++) {
      snapshot = snapshots[k];
      snapshot.choices = snapshot.choices === '' ? [] : snapshot.choices.split(' ');
    }
    return objHeader = new Header(0, 20);
  });
};

setup = function() {
  createCanvas(1350, 1080);
  range = _.range;
  chessboard = new Chessboard(100, 400);
  objSnapshots = new Snapshots(1180, 38);
  explanation = new Explanation(550, 400);
  objItems = new Items(0, 20);
  return expanded = new Expanded(20, 61);
};

draw = function() {
  if (!objHeader) {
    return;
  }
  background(128 + 64);
  if (!options) {
    return;
  }
  objHeader.draw();
  objItems.draw();
  if (MODE === 0) {
    chessboard.draw();
  }
  if (MODE === 0) {
    explanation.draw();
  }
  objSnapshots.draw();
  if (MODE === 1) {
    return expanded.draw();
  }
};

keyPressed = function() {
  if (key === ' ') {
    MODE = 1 - MODE;
  }
  if (key === 'ArrowLeft' || key === 'ArrowUp') {
    current = modulo(current - 1, snapshots.length);
  }
  if (key === 'ArrowRight' || key === 'ArrowDown') {
    return current = modulo(current + 1, snapshots.length);
  }
};

mousePressed = function() {
  objSnapshots.mousePressed();
  return objHeader.mousePressed();
};

mouseMoved = function() {
  if (objHeader) {
    hiliteItem = ''; // CA
    hiliteOption = ''; // a1
    objHeader.mouseMoved();
    if (MODE === 0) {
      return chessboard.mouseMoved();
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\DLX-and-8-Queens\coffee\sketch.coffee