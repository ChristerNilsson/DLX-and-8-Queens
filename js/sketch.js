// Generated by CoffeeScript 2.4.1
var Button, Chessboard, Expanded, Explanation, Header, Items, MODE, Snapshots, chessboard, circle, current, draw, expanded, explanation, hiliteItem, hiliteOption, items, keyPressed, mouseMoved, mousePressed, objHeader, objItems, objSnapshots, options, preload, range, setup, snapshots,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

options = null;

items = null;

snapshots = null;

current = 0;

hiliteOption = '';

hiliteItem = '';

chessboard = null;

objSnapshots = null;

explanation = null;

objHeader = null;

objItems = null;

expanded = null;

MODE = 0; // 0=compact 1=expanded

range = null;

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

Button = class Button {
  constructor(prompt, x1, y1, click) {
    this.prompt = prompt;
    this.x = x1;
    this.y = y1;
    this.click = click;
    this.w = 75;
    this.h = 30;
  }

  draw() {
    rectMode(CENTER);
    fill('white');
    rect(this.x, this.y, this.w, this.h);
    rectMode(CORNER);
    fill('black');
    textAlign(CENTER, CENTER);
    return text(this.prompt, this.x, this.y);
  }

  inside() {
    return (this.x - this.w / 2 < mouseX && mouseX < this.x + this.w / 2) && (this.y - this.h / 2 < mouseY && mouseY < this.y + this.h / 2);
  }

};

Chessboard = class Chessboard {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
    this.R = 50;
  }

  count(i, j) { // calculates list counts for findBestColumn
    var a, b, entries, item1, item2, option, options1, options2;
    j = 7 - j;
    option = 'abcdefgh'[i] + '12345678'[j];
    item1 = 'C' + 'ABCDEFGH'[i];
    item2 = 'R' + '12345678'[j];
    entries = snapshots[current].entries;
    if (entries[item1] && entries[item2]) {
      options1 = entries[item1].split(' ');
      options2 = entries[item2].split(' ');
      a = indexOf.call(options1, option) >= 0 ? options1.length : 0;
      b = indexOf.call(options2, option) >= 0 ? options2.length : 0;
      if (a === 0 || b === 0) {
        return '';
      }
      return min(a, b);
    } else {
      return '';
    }
  }

  draw() {
    var c, choices, i, index, j, k, l, len, len1, len2, len3, m, n, ref, ref1, ref2;
    textSize(20);
    ref = range(8);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(8);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        fill((i + j) % 2 === 0 ? '#ccc' : 'black');
        rect(this.x + this.R * i, this.y + this.R * j, this.R, this.R);
        fill('yellow');
        text(this.count(i, j), this.x + this.R * (i + 0.5), this.y + this.R * (j + 0.5));
      }
    }
    fill('black');
    ref2 = range(8);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      text(8 - i, this.x - this.R * 0.2, this.y + this.R * (i + 0.5));
      text('abcdefgh'[i], this.x + this.R * (i + 0.5), this.y + 8.3 * this.R);
    }
    fill('green');
    textSize(24);
    choices = snapshots[current].choices;
    for (index = n = 0, len3 = choices.length; n < len3; index = ++n) {
      c = choices[index];
      if (c === '') {
        continue;
      }
      i = 0.5 + 'abcdefgh'.indexOf(c[0]);
      j = 8 - 0.5 - '12345678'.indexOf(c[1]);
      stroke('black');
      fill(index === choices.length - 1 ? 'yellow' : 'green');
      circle(this.x + this.R * i, this.y + this.R * j, 0.4 * this.R);
      noStroke();
      fill(index === choices.length - 1 ? 'green' : 'yellow');
      text(c, this.x + this.R * i, this.y + this.R * j);
    }
    return this.hiliteItem();
  }

  drawLine(i1, j1, i2, j2) {
    return line(this.x + this.R * (i1 + 0.5), this.y + this.R * (j1 + 0.5), this.x + this.R * (i2 + 0.5), this.y + this.R * (j2 + 0.5));
  }

  hiliteItem() {
    var i, item, itemType, j;
    item = hiliteItem;
    if (item === '') {
      return;
    }
    itemType = item[0];
    stroke(255, 255, 0, 128);
    strokeWeight(25);
    if (indexOf.call("CR", itemType) >= 0) {
      i = 'ABCDEFGH'.indexOf(item[1]);
      j = '12345678'.indexOf(item[1]);
      if (itemType === 'C') {
        this.drawLine(i, 0, i, 7);
      }
      if (itemType === 'R') {
        this.drawLine(0, 7 - j, 7, 7 - j);
      }
    }
    if (indexOf.call("AB", itemType) >= 0) {
      i = 'ABCDEFGHIJKLMNO'.indexOf(item[1]);
      if (itemType === 'A') {
        if (i < 7) {
          this.drawLine(0, 7 - i, i, 7);
        } else {
          this.drawLine(i - 7, 0, 7, 14 - i);
        }
      }
      if (itemType === 'B') {
        if (i < 7) {
          this.drawLine(7, 7 - i, 7 - i, 7);
        } else {
          this.drawLine(0, 14 - i, 14 - i, 0);
        }
      }
    }
    noStroke();
    return strokeWeight(1);
  }

  mouseMoved() {
    var i, j, k, len, ref, results;
    if ((this.x < mouseX && mouseX < this.x + this.R * 8) && (this.y < mouseY && mouseY < this.y + this.R * 8)) {
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(8);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            j = ref1[l];
            if ((this.y + this.R * (7 - j) < mouseY && mouseY < this.y + this.R * (7 - j + 1))) {
              if ((this.x + this.R * i < mouseX && mouseX < this.x + this.R * (i + 1))) {
                results1.push(hiliteOption = 'abcdefgh'[i] + '12345678'[j]);
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  }

};

Expanded = class Expanded {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

  drawExpanded(entries) {
    var i, item, j, k, len, option, results, x, y;
    textSize(16);
    textAlign(CENTER, CENTER);
    results = [];
    for (i = k = 0, len = items.length; k < len; i = ++k) {
      item = items[i];
      x = this.x + 25 * i;
      if (entries[item]) {
        results.push((function() {
          var l, len1, ref, results1;
          ref = entries[item].split(' ');
          results1 = [];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            option = ref[l];
            j = options.indexOf(option);
            y = this.y + 16 * j;
            stroke(128 + 64);
            line(x, y - 8, x, y + 8);
            line(x - 10, y, x + 8, y);
            noStroke();
            fill(hiliteOption === option ? 'white' : 'black');
            results1.push(text(option, x, y + 2));
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  drawLinks(entries) {
    var i, item, itemKeys, k, key, l, len, len1, option, optionKeys, results, x, y;
    fill('black');
    textSize(12);
    itemKeys = _.keys(entries);
    optionKeys = _.flatten((function() {
      var k, len, ref, results;
      ref = (function() {
        var results1;
        results1 = [];
        for (key in entries) {
          item = entries[key];
          results1.push(item.split(' '));
        }
        return results1;
      })();
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        option = ref[k];
        results.push(option);
      }
      return results;
    })());
    stroke('black');
    for (i = k = 0, len = options.length; k < len; i = ++k) {
      key = options[i];
      if (indexOf.call(optionKeys, key) >= 0) {
        y = this.y + 16 * i;
        line(this.x, y, width - 200, y);
      }
    }
    results = [];
    for (i = l = 0, len1 = items.length; l < len1; i = ++l) {
      key = items[i];
      if (indexOf.call(itemKeys, key) >= 0) {
        x = this.x + 25 * i;
        results.push(line(x, this.y, x, this.y + 63 * 16));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var snapshot;
    snapshot = snapshots[current];
    this.drawLinks(snapshot.entries);
    return this.drawExpanded(snapshot.entries);
  }

};

Explanation = class Explanation {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
    this.explanations = [];
    this.explanations.push('There are 16 primary items, 8 columns and 8 rows\n\nThe matrix is actually 64 options by 46 items\nIt is shown compressed here\nClick View to toggle View Mode\n\nItem CA is chosen\nOption a1 is first\n\nClick Next to see option a1 selected');
    this.explanations.push('Yellow texts are mouse aware\n\nItems CA, R1, AA and BH are hidden\nItem CB is chosen\nOption b3 is selected');
    this.explanations.push('Items CB, R3, AD and BI are hidden\nShortest item is CC\nOption c5 is selected\nWhen c5 later is backtracked, in snapshot 6,\n  it will be replaced with the other options in the item CC. (c6, c7 and c8)\n');
    this.explanations.push("Items CC, R5, AG and BJ are hidden\n\nThe 'best item' is considered to be an item that minimizes the number of remaining choices.\nIf there are several candidates, we choose the leftmost\n\nShortest item is CF\nOption f4 is selected");
    this.explanations.push('Items CF, R4, AI and BF are hidden\nShortest item is CH\nOption h7 is selected');
    this.explanations.push('Items CH, R7, AN and BG are hidden\nR6 is missing => h7 must backtrack\nf4 also backtracks as CF has no options left');
    this.explanations.push('Items CF, CH, R4, R5, R7, AE, AG, AI, AJ, AM, AN, BB, BD, BF, BG and BJ are unhidden\nc5 is backtracked and replaced by c6\nd2 is selected');
    this.explanations.push('Items CD and R2 are hidden\ne7 is selected');
    this.explanations.push('Items CE and R7 are hidden\nR8 is empty => e7 is backtracked');
    this.explanations.push("d2 is backtracked and replaced by d8");
    this.explanations.push("The JSON data structure is available in the browser using Ctrl+Shift+I");
    this.explanations.push("Ordering the entries starting with the center of the chessboard,\nmakes it possible to find the solution in eight snapshots instead of 64");
    this.explanations.push("Skipping the four corners can be done by deleting items AA, AO, BA and BO");
    this.explanations.push("Selecting the first available item instead of the shortest,\nincreases the number of snapshots from 64 to 114");
    this.explanations.push("It is just a coincidence that the number of snapshots\nand the number of options both have the value 64");
    this.explanations.push("Space, Up Arrow and Down Arrow also works");
  }

  draw() {
    textAlign(LEFT, TOP);
    textSize(14);
    fill('black');
    return text(this.explanations[current], this.x, this.y);
  }

};

Header = class Header {
  constructor(xp, yp) {
    this.xp = xp;
    this.yp = yp;
    this.buttons = [];
    this.buttons.push(new Button("View", this.xp + 1134, this.yp - 2, function() {
      return MODE = 1 - MODE;
    }));
    this.buttons.push(new Button("Prev", this.xp + 1218, this.yp - 2, function() {
      return current = modulo(current - 1, snapshots.length);
    }));
    this.buttons.push(new Button("Next", this.xp + 1302, this.yp - 2, function() {
      return current = modulo(current + 1, snapshots.length);
    }));
  }

  draw() {
    var button, entries, entry, i, item, k, key, l, len, len1, optionCount, ref, results, snapshot;
    textAlign(LEFT, CENTER);
    textSize(32);
    fill('black');
    noStroke();
    text('Dancing Links solving Eight Queens', this.xp + 15, this.yp);
    textAlign(RIGHT, CENTER);
    textSize(16);
    snapshot = snapshots[current];
    entries = _.flatten((function() {
      var ref, results;
      ref = snapshot.entries;
      results = [];
      for (key in ref) {
        entry = ref[key];
        results.push(entry.split(' '));
      }
      return results;
    })());
    optionCount = _.unique(entries).length;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    text(`${_.size(snapshot.entries)} items, ${entries.length} entries, ${optionCount} options`, 1150 - 200, this.yp);
    textAlign(CENTER, CENTER);
    textSize(14);
    fill('yellow');
    results = [];
    for (i = l = 0, len1 = items.length; l < len1; i = ++l) {
      item = items[i];
      results.push(text(item, this.xp + 25 + 25 * i, this.yp + 25));
    }
    return results;
  }

  mousePressed() {
    var button, k, len, ref, results;
    ref = this.buttons;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      results.push(button.inside() ? button.click() : void 0);
    }
    return results;
  }

  mouseMoved() {
    var index, item, k, len, results;
    if ((this.yp < mouseY && mouseY < this.yp + 250)) {
      results = [];
      for (index = k = 0, len = items.length; k < len; index = ++k) {
        item = items[index];
        if ((this.xp + 25 * (index + 0.5) < mouseX && mouseX < this.xp + 25 * (index + 1.5))) {
          results.push(hiliteItem = item);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

};

Items = class Items {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

  draw() {
    return this.drawOptions(snapshots[current].entries);
  }

  drawOptions(entries) {
    var i, j, key, option, results, row;
    stroke('yellow');
    strokeWeight(1);
    //line offset+25*0.7,60,offset+w+10,60
    //line offset+25*0.7,60,offset+w+10,60
    noStroke();
// "CA"
    results = [];
    for (key in entries) {
      row = entries[key];
      if (MODE === 0) {
        i = items.indexOf(key);
        results.push((function() {
          var k, len, ref, results1;
          ref = row.split(' ');
          results1 = [];
          for (j = k = 0, len = ref.length; k < len; j = ++k) {
            option = ref[j];
            fill(option === hiliteOption ? 'white' : 'black');
            results1.push(text(option, this.x + 25 * i, this.y + 25 * j));
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Snapshots = class Snapshots {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

  draw() {
    var choice, i, j, k, len, results, snapshot;
    stroke('black');
    textSize(14);
    results = [];
    for (j = k = 0, len = snapshots.length; k < len; j = ++k) {
      snapshot = snapshots[j];
      textAlign(RIGHT, TOP);
      noStroke();
      fill('black');
      text(j, this.x - 2, 2 + this.y + 16 * j);
      fill(current === j ? 'yellow' : 'black');
      rect(this.x, this.y + 16 * j, 20 * 8, 16);
      textAlign(CENTER, TOP);
      fill('yellow');
      results.push((function() {
        var l, len1, ref, results1;
        ref = snapshot.choices;
        results1 = [];
        for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
          choice = ref[i];
          fill(current !== j ? 'yellow' : 'green');
          results1.push(text(choice, 10 + this.x + 20 * i, 2 + this.y + 16 * j));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  mousePressed() {
    var index;
    if (mouseX < width - 200 + 30) {
      return;
    }
    index = Math.floor((mouseY - this.y) / 16);
    if ((0 <= index && index < 65)) {
      return current = index;
    }
  }

};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    var k, len, snapshot;
    console.log(json);
    ({options, items, snapshots} = json);
    options = options.split(' ');
    items = items.split(' ');
    for (k = 0, len = snapshots.length; k < len; k++) {
      snapshot = snapshots[k];
      snapshot.choices = snapshot.choices === '' ? [] : snapshot.choices.split(' ');
    }
    return objHeader = new Header(0, 20);
  });
};

setup = function() {
  createCanvas(1350, 1080);
  range = _.range;
  chessboard = new Chessboard(100, 400);
  objSnapshots = new Snapshots(1180, 38);
  explanation = new Explanation(550, 400);
  objItems = new Items(0 + 25, 20 + 50);
  return expanded = new Expanded(25, 61);
};

draw = function() {
  if (!objHeader) {
    return;
  }
  background(128 + 64);
  if (!options) {
    return;
  }
  objHeader.draw();
  objItems.draw();
  if (MODE === 0) {
    chessboard.draw();
  }
  if (MODE === 0) {
    explanation.draw();
  }
  objSnapshots.draw();
  if (MODE === 1) {
    return expanded.draw();
  }
};

keyPressed = function() {
  if (key === ' ') {
    MODE = 1 - MODE;
  }
  if (key === 'ArrowLeft' || key === 'ArrowUp') {
    current = modulo(current - 1, snapshots.length);
  }
  if (key === 'ArrowRight' || key === 'ArrowDown') {
    return current = modulo(current + 1, snapshots.length);
  }
};

mousePressed = function() {
  objSnapshots.mousePressed();
  return objHeader.mousePressed();
};

mouseMoved = function() {
  if (objHeader) {
    hiliteItem = ''; // CA
    hiliteOption = ''; // a1
    objHeader.mouseMoved();
    if (MODE === 0) {
      return chessboard.mouseMoved();
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQTtFQUFBOzs7QUFBQSxPQUFBLEdBQVU7O0FBQ1YsS0FBQSxHQUFROztBQUNSLFNBQUEsR0FBWTs7QUFFWixPQUFBLEdBQVU7O0FBQ1YsWUFBQSxHQUFlOztBQUNmLFVBQUEsR0FBYTs7QUFFYixVQUFBLEdBQWE7O0FBQ2IsWUFBQSxHQUFlOztBQUNmLFdBQUEsR0FBYzs7QUFDZCxTQUFBLEdBQVk7O0FBQ1osUUFBQSxHQUFXOztBQUNYLFFBQUEsR0FBVzs7QUFFWCxJQUFBLEdBQU8sRUFmUDs7QUFnQkEsS0FBQSxHQUFROztBQUNSLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQUE7U0FBYSxPQUFBLENBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxDQUFBLEdBQUUsQ0FBaEIsRUFBbUIsQ0FBQSxHQUFFLENBQXJCO0FBQWI7O0FBRUgsU0FBTixNQUFBLE9BQUE7RUFDQyxXQUFjLE9BQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFPLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUM3QixJQUFDLENBQUEsQ0FB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bCBcclxuc25hcHNob3RzID0gbnVsbFxyXG5cclxuY3VycmVudCA9IDBcclxuaGlsaXRlT3B0aW9uID0gJydcclxuaGlsaXRlSXRlbSA9ICcnXHJcblxyXG5jaGVzc2JvYXJkID0gbnVsbFxyXG5vYmpTbmFwc2hvdHMgPSBudWxsXHJcbmV4cGxhbmF0aW9uID0gbnVsbFxyXG5vYmpIZWFkZXIgPSBudWxsXHJcbm9iakl0ZW1zID0gbnVsbFxyXG5leHBhbmRlZCA9IG51bGxcclxuXHJcbk1PREUgPSAwICMgMD1jb21wYWN0IDE9ZXhwYW5kZWRcclxucmFuZ2UgPSBudWxsIFxyXG5jaXJjbGUgPSAoeCwgeSwgcikgLT4gZWxsaXBzZSB4LCB5LCAyKnIsIDIqclxyXG5cclxuY2xhc3MgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoQHByb21wdCxAeCxAeSxAY2xpY2spIC0+XHJcblx0XHRAdyA9IDc1XHJcblx0XHRAaCA9IDMwXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRyZWN0TW9kZSBDRU5URVJcclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0cmVjdCBAeCxAeSxAdyxAaFxyXG5cdFx0cmVjdE1vZGUgQ09STkVSXHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHR0ZXh0IEBwcm9tcHQsQHgsQHlcclxuXHRpbnNpZGUgOiAtPiBAeC1Ady8yIDwgbW91c2VYIDwgQHgrQHcvMiBhbmQgQHktQGgvMiA8IG1vdXNlWSA8IEB5K0BoLzJcclxuXHJcbmNsYXNzIENoZXNzYm9hcmRcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cclxuXHRcdEBSID0gNTBcclxuXHJcblx0Y291bnQgOiAoaSxqKSAtPiAjIGNhbGN1bGF0ZXMgbGlzdCBjb3VudHMgZm9yIGZpbmRCZXN0Q29sdW1uXHJcblx0XHRqID0gNy1qXHJcblx0XHRvcHRpb24gPSAnYWJjZGVmZ2gnW2ldICsgJzEyMzQ1Njc4J1tqXVxyXG5cdFx0aXRlbTEgPSAnQycgKyAnQUJDREVGR0gnW2ldXHJcblx0XHRpdGVtMiA9ICdSJyArICcxMjM0NTY3OCdbal1cclxuXHRcdGVudHJpZXMgPSBzbmFwc2hvdHNbY3VycmVudF0uZW50cmllc1xyXG5cdFx0aWYgZW50cmllc1tpdGVtMV0gYW5kIGVudHJpZXNbaXRlbTJdXHJcblx0XHRcdG9wdGlvbnMxID0gZW50cmllc1tpdGVtMV0uc3BsaXQgJyAnXHJcblx0XHRcdG9wdGlvbnMyID0gZW50cmllc1tpdGVtMl0uc3BsaXQgJyAnXHJcblx0XHRcdGEgPSBpZiBvcHRpb24gaW4gb3B0aW9uczEgdGhlbiBvcHRpb25zMS5sZW5ndGggZWxzZSAwXHJcblx0XHRcdGIgPSBpZiBvcHRpb24gaW4gb3B0aW9uczIgdGhlbiBvcHRpb25zMi5sZW5ndGggZWxzZSAwXHJcblx0XHRcdGlmIGE9PTAgb3IgYj09MCB0aGVuIHJldHVybiAnJ1xyXG5cdFx0XHRtaW4gYSxiXHJcblx0XHRlbHNlXHJcblx0XHRcdCcnXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cclxuXHRcdHRleHRTaXplIDIwXHJcblx0XHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDhcclxuXHRcdFx0XHRmaWxsIGlmIChpK2opJTI9PTAgdGhlbiAnI2NjYycgZWxzZSAnYmxhY2snXHJcblx0XHRcdFx0cmVjdCBAeCtAUippLCBAeStAUipqLCBAUiwgQFJcclxuXHRcdFx0XHRmaWxsICd5ZWxsb3cnXHJcblx0XHRcdFx0dGV4dCBAY291bnQoaSxqKSwgQHgrQFIqKGkrMC41KSwgQHkrQFIqKGorMC41KVxyXG5cclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgOFxyXG5cdFx0XHR0ZXh0IDgtaSxAeC1AUiowLjIsQHkrQFIqKGkrMC41KVxyXG5cdFx0XHR0ZXh0ICdhYmNkZWZnaCdbaV0sQHgrQFIqKGkrMC41KSxAeSs4LjMqQFJcclxuXHJcblx0XHRmaWxsICdncmVlbidcclxuXHRcdHRleHRTaXplIDI0XHJcblx0XHRjaG9pY2VzID0gc25hcHNob3RzW2N1cnJlbnRdLmNob2ljZXNcclxuXHRcdGZvciBjLGluZGV4IGluIGNob2ljZXNcclxuXHRcdFx0aWYgYz09JycgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRpID0gMC41ICsgJ2FiY2RlZmdoJy5pbmRleE9mIGNbMF1cclxuXHRcdFx0aiA9IDggLSAwLjUgLSAnMTIzNDU2NzgnLmluZGV4T2YgY1sxXVxyXG5cdFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0XHRmaWxsIGlmIGluZGV4ID09IGNob2ljZXMubGVuZ3RoLTEgdGhlbiAneWVsbG93JyBlbHNlICdncmVlbidcclxuXHRcdFx0Y2lyY2xlIEB4K0BSKmksQHkrQFIqaiwwLjQqQFJcclxuXHRcdFx0bm9TdHJva2UoKVxyXG5cdFx0XHRmaWxsIGlmIGluZGV4ID09IGNob2ljZXMubGVuZ3RoLTEgdGhlbiAnZ3JlZW4nIGVsc2UgJ3llbGxvdydcclxuXHRcdFx0dGV4dCBjLEB4K0BSKmksQHkrQFIqalxyXG5cclxuXHRcdEBoaWxpdGVJdGVtKClcclxuXHJcblx0ZHJhd0xpbmUgOiAoaTEsajEsaTIsajIpIC0+XHJcblx0XHRsaW5lIEB4K0BSKihpMSswLjUpLEB5K0BSKihqMSswLjUpLEB4K0BSKihpMiswLjUpLEB5K0BSKihqMiswLjUpXHJcblxyXG5cdGhpbGl0ZUl0ZW0gOiAtPlxyXG5cdFx0aXRlbSA9IGhpbGl0ZUl0ZW1cclxuXHRcdGlmIGl0ZW0gPT0gJycgdGhlbiByZXR1cm5cclxuXHRcdGl0ZW1UeXBlID0gaXRlbVswXVxyXG5cdFx0c3Ryb2tlIDI1NSwyNTUsMCwxMjhcclxuXHRcdHN0cm9rZVdlaWdodCAyNVxyXG5cdFx0aWYgaXRlbVR5cGUgaW4gXCJDUlwiXHJcblx0XHRcdGkgPSAnQUJDREVGR0gnLmluZGV4T2YgaXRlbVsxXVxyXG5cdFx0XHRqID0gJzEyMzQ1Njc4Jy5pbmRleE9mIGl0ZW1bMV1cclxuXHRcdFx0aWYgaXRlbVR5cGUgPT0gJ0MnIHRoZW4gQGRyYXdMaW5lIGksMCxpLDdcclxuXHRcdFx0aWYgaXRlbVR5cGUgPT0gJ1InIHRoZW4gQGRyYXdMaW5lIDAsNy1qLDcsNy1qXHJcblx0XHRpZiBpdGVtVHlwZSBpbiBcIkFCXCJcclxuXHRcdFx0aSA9ICdBQkNERUZHSElKS0xNTk8nLmluZGV4T2YgaXRlbVsxXVxyXG5cdFx0XHRpZiBpdGVtVHlwZSA9PSAnQSdcclxuXHRcdFx0XHRpZiBpIDwgNyB0aGVuIEBkcmF3TGluZSAwLDctaSxpLDcgZWxzZSBAZHJhd0xpbmUgaS03LDAsIDcsMTQtaVxyXG5cdFx0XHRpZiBpdGVtVHlwZSA9PSAnQidcclxuXHRcdFx0XHRpZiBpIDwgNyB0aGVuIEBkcmF3TGluZSA3LDctaSw3LWksNyBlbHNlIEBkcmF3TGluZSAwLDE0LWksMTQtaSwwXHJcblx0XHRub1N0cm9rZSgpXHJcblx0XHRzdHJva2VXZWlnaHQgMVxyXG5cclxuXHRtb3VzZU1vdmVkIDogLT5cclxuXHRcdGlmIEB4IDwgbW91c2VYIDwgQHgrQFIqOCBhbmQgQHkgPCBtb3VzZVkgPCBAeStAUio4XHJcblx0XHRcdGZvciBpIGluIHJhbmdlIDhcclxuXHRcdFx0XHRmb3IgaiBpbiByYW5nZSA4XHJcblx0XHRcdFx0XHRpZiBAeStAUiooNy1qKSA8IG1vdXNlWSA8IEB5K0BSKig3LWorMSlcclxuXHRcdFx0XHRcdFx0aWYgQHgrQFIqaSA8IG1vdXNlWCA8IEB4K0BSKihpKzEpXHJcblx0XHRcdFx0XHRcdFx0aGlsaXRlT3B0aW9uID0gJ2FiY2RlZmdoJ1tpXSArICcxMjM0NTY3OCdbal1cclxuXHJcbmNsYXNzIEV4cGFuZGVkXHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHkpIC0+XHJcblxyXG5cdGRyYXdFeHBhbmRlZCA6IChlbnRyaWVzKSAtPlxyXG5cdFx0dGV4dFNpemUgMTZcclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHRmb3IgaXRlbSxpIGluIGl0ZW1zXHJcblx0XHRcdHggPSBAeCArIDI1ICogaVxyXG5cdFx0XHRpZiBlbnRyaWVzW2l0ZW1dXHJcblx0XHRcdFx0Zm9yIG9wdGlvbiBpbiBlbnRyaWVzW2l0ZW1dLnNwbGl0ICcgJ1xyXG5cdFx0XHRcdFx0aiA9IG9wdGlvbnMuaW5kZXhPZiBvcHRpb25cclxuXHRcdFx0XHRcdHkgPSBAeSsxNipqXHJcblx0XHRcdFx0XHRzdHJva2UgMTI4KzY0XHJcblx0XHRcdFx0XHRsaW5lIHgseS04LHgseSs4XHJcblx0XHRcdFx0XHRsaW5lIHgtMTAseSx4KzgseVxyXG5cdFx0XHRcdFx0bm9TdHJva2UoKVxyXG5cdFx0XHRcdFx0ZmlsbCBpZiBoaWxpdGVPcHRpb24gPT0gb3B0aW9uIHRoZW4gJ3doaXRlJyBlbHNlICdibGFjaydcclxuXHRcdFx0XHRcdHRleHQgb3B0aW9uLHgseSsyXHJcblxyXG5cdGRyYXdMaW5rcyA6IChlbnRyaWVzKSAtPlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0U2l6ZSAxMlxyXG5cdFx0aXRlbUtleXMgPSBfLmtleXMgZW50cmllc1xyXG5cdFx0b3B0aW9uS2V5cyA9IF8uZmxhdHRlbiAob3B0aW9uIGZvciBvcHRpb24gaW4gKGl0ZW0uc3BsaXQgJyAnIGZvciBrZXksaXRlbSBvZiBlbnRyaWVzKSlcclxuXHRcdHN0cm9rZSAnYmxhY2snXHJcblxyXG5cdFx0Zm9yIGtleSxpIGluIG9wdGlvbnNcclxuXHRcdFx0aWYga2V5IGluIG9wdGlvbktleXNcclxuXHRcdFx0XHR5ID0gQHkgKyAxNippXHJcblx0XHRcdFx0bGluZSBAeCx5LHdpZHRoLTIwMCx5XHJcblxyXG5cdFx0Zm9yIGtleSxpIGluIGl0ZW1zXHJcblx0XHRcdGlmIGtleSBpbiBpdGVtS2V5c1xyXG5cdFx0XHRcdHggPSBAeCArIDI1KmlcclxuXHRcdFx0XHRsaW5lIHgsQHkseCxAeSs2MyoxNlxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHNuYXBzaG90ID0gc25hcHNob3RzW2N1cnJlbnRdXHJcblx0XHRAZHJhd0xpbmtzICAgIHNuYXBzaG90LmVudHJpZXNcclxuXHRcdEBkcmF3RXhwYW5kZWQgc25hcHNob3QuZW50cmllc1xyXG5cclxuY2xhc3MgRXhwbGFuYXRpb24gXHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHkpIC0+XHJcblx0XHRAZXhwbGFuYXRpb25zID0gW11cclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCAnVGhlcmUgYXJlIDE2IHByaW1hcnkgaXRlbXMsIDggY29sdW1ucyBhbmQgOCByb3dzXFxuXFxuVGhlIG1hdHJpeCBpcyBhY3R1YWxseSA2NCBvcHRpb25zIGJ5IDQ2IGl0ZW1zXFxuSXQgaXMgc2hvd24gY29tcHJlc3NlZCBoZXJlXFxuQ2xpY2sgVmlldyB0byB0b2dnbGUgVmlldyBNb2RlXFxuXFxuSXRlbSBDQSBpcyBjaG9zZW5cXG5PcHRpb24gYTEgaXMgZmlyc3RcXG5cXG5DbGljayBOZXh0IHRvIHNlZSBvcHRpb24gYTEgc2VsZWN0ZWQnXHJcblx0XHRAZXhwbGFuYXRpb25zLnB1c2ggJ1llbGxvdyB0ZXh0cyBhcmUgbW91c2UgYXdhcmVcXG5cXG5JdGVtcyBDQSwgUjEsIEFBIGFuZCBCSCBhcmUgaGlkZGVuXFxuSXRlbSBDQiBpcyBjaG9zZW5cXG5PcHRpb24gYjMgaXMgc2VsZWN0ZWQnXHJcblx0XHRAZXhwbGFuYXRpb25zLnB1c2ggJ0l0ZW1zIENCLCBSMywgQUQgYW5kIEJJIGFyZSBoaWRkZW5cXG5TaG9ydGVzdCBpdGVtIGlzIENDXFxuT3B0aW9uIGM1IGlzIHNlbGVjdGVkXFxuV2hlbiBjNSBsYXRlciBpcyBiYWNrdHJhY2tlZCwgaW4gc25hcHNob3QgNixcXG4gIGl0IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgb3RoZXIgb3B0aW9ucyBpbiB0aGUgaXRlbSBDQy4gKGM2LCBjNyBhbmQgYzgpXFxuJ1xyXG5cdFx0QGV4cGxhbmF0aW9ucy5wdXNoIFwiSXRlbXMgQ0MsIFI1LCBBRyBhbmQgQkogYXJlIGhpZGRlblxcblxcblRoZSAnYmVzdCBpdGVtJyBpcyBjb25zaWRlcmVkIHRvIGJlIGFuIGl0ZW0gdGhhdCBtaW5pbWl6ZXMgdGhlIG51bWJlciBvZiByZW1haW5pbmcgY2hvaWNlcy5cXG5JZiB0aGVyZSBhcmUgc2V2ZXJhbCBjYW5kaWRhdGVzLCB3ZSBjaG9vc2UgdGhlIGxlZnRtb3N0XFxuXFxuU2hvcnRlc3QgaXRlbSBpcyBDRlxcbk9wdGlvbiBmNCBpcyBzZWxlY3RlZFwiXHJcblx0XHRAZXhwbGFuYXRpb25zLnB1c2ggJ0l0ZW1zIENGLCBSNCwgQUkgYW5kIEJGIGFyZSBoaWRkZW5cXG5TaG9ydGVzdCBpdGVtIGlzIENIXFxuT3B0aW9uIGg3IGlzIHNlbGVjdGVkJ1xyXG5cdFx0QGV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDSCwgUjcsIEFOIGFuZCBCRyBhcmUgaGlkZGVuXFxuUjYgaXMgbWlzc2luZyA9PiBoNyBtdXN0IGJhY2t0cmFja1xcbmY0IGFsc28gYmFja3RyYWNrcyBhcyBDRiBoYXMgbm8gb3B0aW9ucyBsZWZ0J1xyXG5cdFx0QGV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDRiwgQ0gsIFI0LCBSNSwgUjcsIEFFLCBBRywgQUksIEFKLCBBTSwgQU4sIEJCLCBCRCwgQkYsIEJHIGFuZCBCSiBhcmUgdW5oaWRkZW5cXG5jNSBpcyBiYWNrdHJhY2tlZCBhbmQgcmVwbGFjZWQgYnkgYzZcXG5kMiBpcyBzZWxlY3RlZCdcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCAnSXRlbXMgQ0QgYW5kIFIyIGFyZSBoaWRkZW5cXG5lNyBpcyBzZWxlY3RlZCdcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCAnSXRlbXMgQ0UgYW5kIFI3IGFyZSBoaWRkZW5cXG5SOCBpcyBlbXB0eSA9PiBlNyBpcyBiYWNrdHJhY2tlZCdcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCBcImQyIGlzIGJhY2t0cmFja2VkIGFuZCByZXBsYWNlZCBieSBkOFwiXHJcblx0XHRAZXhwbGFuYXRpb25zLnB1c2ggXCJUaGUgSlNPTiBkYXRhIHN0cnVjdHVyZSBpcyBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXIgdXNpbmcgQ3RybCtTaGlmdCtJXCJcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCBcIk9yZGVyaW5nIHRoZSBlbnRyaWVzIHN0YXJ0aW5nIHdpdGggdGhlIGNlbnRlciBvZiB0aGUgY2hlc3Nib2FyZCxcXG5tYWtlcyBpdCBwb3NzaWJsZSB0byBmaW5kIHRoZSBzb2x1dGlvbiBpbiBlaWdodCBzbmFwc2hvdHMgaW5zdGVhZCBvZiA2NFwiXHJcblx0XHRAZXhwbGFuYXRpb25zLnB1c2ggXCJTa2lwcGluZyB0aGUgZm91ciBjb3JuZXJzIGNhbiBiZSBkb25lIGJ5IGRlbGV0aW5nIGl0ZW1zIEFBLCBBTywgQkEgYW5kIEJPXCJcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCBcIlNlbGVjdGluZyB0aGUgZmlyc3QgYXZhaWxhYmxlIGl0ZW0gaW5zdGVhZCBvZiB0aGUgc2hvcnRlc3QsXFxuaW5jcmVhc2VzIHRoZSBudW1iZXIgb2Ygc25hcHNob3RzIGZyb20gNjQgdG8gMTE0XCJcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCBcIkl0IGlzIGp1c3QgYSBjb2luY2lkZW5jZSB0aGF0IHRoZSBudW1iZXIgb2Ygc25hcHNob3RzXFxuYW5kIHRoZSBudW1iZXIgb2Ygb3B0aW9ucyBib3RoIGhhdmUgdGhlIHZhbHVlIDY0XCJcclxuXHRcdEBleHBsYW5hdGlvbnMucHVzaCBcIlNwYWNlLCBVcCBBcnJvdyBhbmQgRG93biBBcnJvdyBhbHNvIHdvcmtzXCJcclxuXHRkcmF3IDogLT5cclxuXHRcdHRleHRBbGlnbiBMRUZULFRPUFxyXG5cdFx0dGV4dFNpemUgMTRcclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0dGV4dCBAZXhwbGFuYXRpb25zW2N1cnJlbnRdLEB4LEB5XHJcblx0XHJcbmNsYXNzIEhlYWRlclxyXG5cdGNvbnN0cnVjdG9yIDogKEB4cCxAeXApIC0+XHJcblx0XHRAYnV0dG9ucyA9IFtdXHJcblx0XHRAYnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gXCJWaWV3XCIsQHhwKzExMzQsQHlwLTIsIC0+IE1PREUgPSAxIC0gTU9ERVxyXG5cdFx0QGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIFwiUHJldlwiLEB4cCsxMjE4LEB5cC0yLCAtPiBjdXJyZW50ID0gKGN1cnJlbnQtMSkgJSUgc25hcHNob3RzLmxlbmd0aFxyXG5cdFx0QGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIFwiTmV4dFwiLEB4cCsxMzAyLEB5cC0yLCAtPiBjdXJyZW50ID0gKGN1cnJlbnQrMSkgJSUgc25hcHNob3RzLmxlbmd0aFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0dGV4dEFsaWduIExFRlQsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSAzMlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRub1N0cm9rZSgpXHJcblx0XHR0ZXh0ICdEYW5jaW5nIExpbmtzIHNvbHZpbmcgRWlnaHQgUXVlZW5zJywgQHhwKzE1LEB5cFxyXG5cdFx0dGV4dEFsaWduIFJJR0hULENFTlRFUlxyXG5cdFx0dGV4dFNpemUgMTZcclxuXHRcdHNuYXBzaG90ID0gc25hcHNob3RzW2N1cnJlbnRdXHJcblx0XHRlbnRyaWVzID0gXy5mbGF0dGVuIChlbnRyeS5zcGxpdCAnICcgZm9yIGtleSxlbnRyeSBvZiBzbmFwc2hvdC5lbnRyaWVzKVxyXG5cdFx0b3B0aW9uQ291bnQgPSBfLnVuaXF1ZShlbnRyaWVzKS5sZW5ndGhcclxuXHJcblx0XHRidXR0b24uZHJhdygpIGZvciBidXR0b24gaW4gQGJ1dHRvbnNcclxuXHJcblx0XHR0ZXh0IFwiI3tfLnNpemUoc25hcHNob3QuZW50cmllcyl9IGl0ZW1zLCAje2VudHJpZXMubGVuZ3RofSBlbnRyaWVzLCAje29wdGlvbkNvdW50fSBvcHRpb25zXCIsIDExNTAtMjAwLCBAeXBcclxuXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0dGV4dFNpemUgMTRcclxuXHRcdGZpbGwgJ3llbGxvdydcclxuXHRcdGZvciBpdGVtLGkgaW4gaXRlbXNcclxuXHRcdFx0dGV4dCBpdGVtLEB4cCsyNSsyNSppLEB5cCsyNVx0XHJcblxyXG5cdG1vdXNlUHJlc3NlZCA6IC0+IChpZiBidXR0b24uaW5zaWRlKCkgdGhlbiBidXR0b24uY2xpY2soKSkgZm9yIGJ1dHRvbiBpbiBAYnV0dG9uc1xyXG5cclxuXHRtb3VzZU1vdmVkIDogLT5cclxuXHRcdGlmIEB5cCA8IG1vdXNlWSA8IEB5cCsyNTBcclxuXHRcdFx0Zm9yIGl0ZW0saW5kZXggaW4gaXRlbXNcclxuXHRcdFx0XHRpZiBAeHArMjUqKGluZGV4KzAuNSkgPCBtb3VzZVggPCBAeHArMjUqKGluZGV4KzEuNSkgdGhlbiBoaWxpdGVJdGVtID0gaXRlbVxyXG5cclxuY2xhc3MgSXRlbXNcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRAZHJhd09wdGlvbnMgc25hcHNob3RzW2N1cnJlbnRdLmVudHJpZXNcclxuXHJcblx0ZHJhd09wdGlvbnMgOiAoZW50cmllcykgLT5cclxuXHJcblx0XHRzdHJva2UgJ3llbGxvdydcclxuXHRcdHN0cm9rZVdlaWdodCAxXHJcblx0XHQjbGluZSBvZmZzZXQrMjUqMC43LDYwLG9mZnNldCt3KzEwLDYwXHJcblx0XHQjbGluZSBvZmZzZXQrMjUqMC43LDYwLG9mZnNldCt3KzEwLDYwXHJcblx0XHRub1N0cm9rZSgpXHJcblxyXG5cdFx0Zm9yIGtleSxyb3cgb2YgZW50cmllcyAjIFwiQ0FcIlxyXG5cdFx0XHRpZiBNT0RFID09IDBcclxuXHRcdFx0XHRpID0gaXRlbXMuaW5kZXhPZiBrZXlcclxuXHRcdFx0XHRmb3Igb3B0aW9uLGogaW4gcm93LnNwbGl0ICcgJ1xyXG5cdFx0XHRcdFx0ZmlsbCBpZiBvcHRpb24gPT0gaGlsaXRlT3B0aW9uIHRoZW4gJ3doaXRlJyBlbHNlICdibGFjaydcclxuXHRcdFx0XHRcdHRleHQgb3B0aW9uLEB4ICsgMjUqaSxAeSArIDI1KmpcclxuXHJcbmNsYXNzIFNuYXBzaG90c1xyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5KSAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0c3Ryb2tlICdibGFjaydcclxuXHRcdHRleHRTaXplIDE0XHJcblx0XHRmb3Igc25hcHNob3QsaiBpbiBzbmFwc2hvdHNcclxuXHRcdFx0dGV4dEFsaWduIFJJR0hULFRPUFxyXG5cdFx0XHRub1N0cm9rZSgpXHJcblx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0XHR0ZXh0IGosQHgtMiwyK0B5KzE2KmpcclxuXHRcdFx0ZmlsbCBpZiBjdXJyZW50ID09IGogdGhlbiAneWVsbG93JyBlbHNlICdibGFjaydcclxuXHRcdFx0cmVjdCBAeCxAeSsxNipqLDIwKjgsMTZcclxuXHRcdFx0dGV4dEFsaWduIENFTlRFUixUT1BcclxuXHRcdFx0ZmlsbCAneWVsbG93J1xyXG5cdFx0XHRmb3IgY2hvaWNlLGkgaW4gc25hcHNob3QuY2hvaWNlc1xyXG5cdFx0XHRcdGZpbGwgaWYgY3VycmVudCAhPSBqIHRoZW4gJ3llbGxvdycgZWxzZSAnZ3JlZW4nXHJcblx0XHRcdFx0dGV4dCBjaG9pY2UsMTArQHgrMjAqaSwyK0B5KzE2KmpcclxuXHJcblx0bW91c2VQcmVzc2VkIDogLT5cclxuXHRcdGlmIG1vdXNlWCA8IHdpZHRoLTIwMCArIDMwIHRoZW4gcmV0dXJuIFxyXG5cdFx0aW5kZXggPSBNYXRoLmZsb29yIChtb3VzZVkgLSBAeSkvMTZcclxuXHRcdGlmIDAgPD0gaW5kZXggPCA2NSB0aGVuIGN1cnJlbnQgPSBpbmRleCBcclxuXHJcbnByZWxvYWQgPSAtPlxyXG5cdGZldGNoIFwiOHF1ZWVucy5qc29uXCJcclxuXHRcdC50aGVuIChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpIFxyXG5cdFx0LnRoZW4gKGpzb24pID0+IFxyXG5cdFx0XHRjb25zb2xlLmxvZyBqc29uXHJcblx0XHRcdHtvcHRpb25zLGl0ZW1zLHNuYXBzaG90c30gPSBqc29uXHJcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLnNwbGl0ICcgJ1xyXG5cdFx0XHRpdGVtcyA9IGl0ZW1zLnNwbGl0ICcgJ1xyXG5cdFx0XHRmb3Igc25hcHNob3QgaW4gc25hcHNob3RzXHJcblx0XHRcdFx0c25hcHNob3QuY2hvaWNlcyA9IGlmIHNuYXBzaG90LmNob2ljZXMgPT0gJycgdGhlbiAgW10gZWxzZSBzbmFwc2hvdC5jaG9pY2VzLnNwbGl0ICcgJ1xyXG5cdFx0XHRvYmpIZWFkZXIgPSBuZXcgSGVhZGVyIDAsMjBcclxuXHJcbnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgMTM1MCwxMDgwXHJcblx0cmFuZ2UgPSBfLnJhbmdlXHJcblx0Y2hlc3Nib2FyZCA9IG5ldyBDaGVzc2JvYXJkIDEwMCwgNDAwXHJcblx0b2JqU25hcHNob3RzID0gbmV3IFNuYXBzaG90cyAxMTgwLCAzOFxyXG5cdGV4cGxhbmF0aW9uID0gbmV3IEV4cGxhbmF0aW9uIDU1MCw0MDBcclxuXHRvYmpJdGVtcyA9IG5ldyBJdGVtcyAwKzI1LDIwKzUwXHJcblx0ZXhwYW5kZWQgPSBuZXcgRXhwYW5kZWQgMjUsNjFcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGlmIG5vdCBvYmpIZWFkZXIgdGhlbiByZXR1cm5cclxuXHRiYWNrZ3JvdW5kIDEyOCs2NFxyXG5cdGlmIG5vdCBvcHRpb25zIHRoZW4gcmV0dXJuXHJcblx0b2JqSGVhZGVyLmRyYXcoKVxyXG5cdG9iakl0ZW1zLmRyYXcoKVxyXG5cdGlmIE1PREUgPT0gMCB0aGVuIGNoZXNzYm9hcmQuZHJhdygpXHJcblx0aWYgTU9ERSA9PSAwIHRoZW4gZXhwbGFuYXRpb24uZHJhdygpXHJcblx0b2JqU25hcHNob3RzLmRyYXcoKVxyXG5cdGlmIE1PREUgPT0gMSB0aGVuIGV4cGFuZGVkLmRyYXcoKVxyXG5cclxua2V5UHJlc3NlZCA9IC0+XHJcblx0aWYga2V5PT0nICcgdGhlbiBNT0RFID0gMSAtIE1PREVcclxuXHRpZiBrZXkgaW4gWydBcnJvd0xlZnQnLCdBcnJvd1VwJ10gdGhlbiBjdXJyZW50ID0gKGN1cnJlbnQtMSkgJSUgc25hcHNob3RzLmxlbmd0aFxyXG5cdGlmIGtleSBpbiBbJ0Fycm93UmlnaHQnLCdBcnJvd0Rvd24nXSB0aGVuIGN1cnJlbnQgPSAoY3VycmVudCsxKSAlJSBzbmFwc2hvdHMubGVuZ3RoXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdG9ialNuYXBzaG90cy5tb3VzZVByZXNzZWQoKVxyXG5cdG9iakhlYWRlci5tb3VzZVByZXNzZWQoKVxyXG5cclxubW91c2VNb3ZlZCA9IC0+XHJcblx0aWYgb2JqSGVhZGVyXHJcblx0XHRoaWxpdGVJdGVtID0gJycgIyBDQVxyXG5cdFx0aGlsaXRlT3B0aW9uID0gJycgIyBhMVxyXG5cdFx0b2JqSGVhZGVyLm1vdXNlTW92ZWQoKVxyXG5cdFx0aWYgTU9ERSA9PSAwIHRoZW4gY2hlc3Nib2FyZC5tb3VzZU1vdmVkKClcclxuIl19
//# sourceURL=c:\github\DLX-and-8-Queens\coffee\sketch.coffee